

@using Sales.Shared.Entities;

<h3>Formulario CRUD de Categoria</h3>

@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="onBeforeInternalNavigation"></NavigationLock>


<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Categoria:</label>
        <div>
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="@Category.Name" />
            <ValidationMessage For="@(() => Category.Name)" />
            <label>Apellido:</label>
            <InputText class="form-control" @bind-Value="@Category.LName" />
            <ValidationMessage For="@(() => Category.LName)" />
            <label>Dirección:</label>
            <InputText class="form-control" @bind-Value="@Category.Address" />
            <ValidationMessage For="@(() => Category.Address)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>



@code {
    private EditContext editContext = null!;



    [EditorRequired]
    [Parameter]
    public Category Category { get; set; } = null!;
    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }



    protected override void OnInitialized()
    {
        editContext = new(Category);
    }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task onBeforeInternalNavigation(LocationChangingContext context)
    {

        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Deseas abandonar la´página?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No perro",
                ConfirmButtonText = "Sip :)",
            });


        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
            //Deja salir al usuario sin guardar los cambios
        }

        context.PreventNavigation();
        //Impide que el usuario navege
    }

}


