@using Blazor.WEB.Repositories;
@using Sales.Shared.Entities;

@page "/categories"
@inject IRepository repository

@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;




<h2>Categorias de Ricardito</h2>

<a class="btn btn-primary mb-3" href="/categories/create">Crear nueva Categoria</a>

<GenericList MyList="Categories">
    <Loading>
        <p>Cargando categorias ;).....</p>
    </Loading>

    <Body>
        <table class="table table-striped">

            <thead>
                <tr>
                    <th>Controles</th>
                    <th>No.Categoria</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Dirección</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=>DelegateAsync(category.Id) )>Borrar</button>
                        </td>
                        <td>
                            @category.Id
                        </td>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            @category.LName
                        </td>
                        <td>
                            @category.Address
                        </td>
                    </tr>
                }
            </tbody>
        </table>


    </Body>

</GenericList>


@code {
    public List<Category>? Categories { get; set; }

    //cuando la pagina carga, ejecuta este metodo
    protected async override Task OnInitializedAsync()
    {
        var responseHppt = await repository.Get<List<Category>>("api/categories");
        Categories = responseHppt.Response!;
    }

    private async Task LoadAsync()
    {

    }

    private async Task DelegateAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Deseas eliminar el registro?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No perro",
                ConfirmButtonText = "Sip pa'ps :p",
            });


        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
            //Deja salir al usuario sin guardar los cambios
        }

        var responseHttp = await repository.Delete($"/api/categories/{id}");
        if (responseHttp.Error)
        {

            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("HHERROR", message, SweetAlertIcon.Error);
                return;

            }
        }

    }

}
